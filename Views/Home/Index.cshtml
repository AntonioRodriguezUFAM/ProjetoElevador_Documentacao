@{
	ViewData["Title"] = "Home Page";
}

<div class="text-center">
	<h1 class="display-3">Welcome </h1>
	<h2 class="display-5">PROJETO FINAL - JORNADA MS </h2>
	<h2 class="display-5">Projeto Elevador Documentacao </h2>
</div>

<div class="text-body">

	<p id="isPasted"><strong>VISAO GERAL DO PROJETO</strong></p>

	<p>
		Neste projeto, voc&ecirc; ir&aacute; aplicar o conhecimento adquirido nesta jornada, este ser&aacute; um momento para exercitar a l&oacute;gica de programa&ccedil;&atilde;o e praticar os tipos de dados, controle de fluxo, la&ccedil;os de repeti&ccedil;&atilde;o utilizando fun&ccedil;&otilde;es. &nbsp;O projeto ser&aacute; publicado no seu github utilizando os comandos vistos durante a jornada.
		O projeto ser&aacute; um software que tem como fun&ccedil;&atilde;o o gerenciamento de um elevador, ele ter&aacute; as fun&ccedil;&otilde;es de inicializar, entrar, sair, subir e descer.
	</p>
	<p><strong>INSTRU&Ccedil;&Otilde;ES</strong></p>
	<p>Utilize o Visual Studio Community, crie um projeto **Aplicativo de Console** (**console app) como nome ProjetoElevador, utilize a estrutura .NET 5 ou inferior.**</p>
	<p>Todas as classes dever&atilde;o ficar em uma pasta chamada Model, a estrutura com as pastas de Controller e View s&atilde;o opcionais.</p>
	<p>Crie uma classe denominada Elevador para armazenar as informa&ccedil;&otilde;es de um elevador dentro de um pr&eacute;dio, a classe deve armazenar o andar atual (t&eacute;rreo = 0), total de andares no pr&eacute;dio (desconsiderando o t&eacute;rreo), capacidade do elevador e quantas pessoas est&atilde;o presentes nele. A classe deve tamb&eacute;m disponibilizar os seguintes m&eacute;todos:</p>
    	<pre class='brush: cs'>
            <p id="isPasted"><strong>Classe Elevador</strong></p> 
     internal class Elevador
    {
        //Um classe possui: 

        //  1)  Propriedades (atributos)
        //  2)  Métodos (ações)
        //  3)  Eventos (o que é feito durante uma ação)

        //------------------------------------------------------------------------------------------------
        // 1) Propriedades (atributos) - todas as variavel se tornam propriedades.
        //   Propriedades são as caracteriticas.
        //------------------------------------------------------------------------------------------------
        // O usuário vai informar quantos andares o elevador possui e a capacidade de pessoas.
        public int TotalAndar { get; set; } // Entrar Andares Total
        public int CapacidadeElevador { get; set; } // capacidade de pessoas
        public int AndarAtual { get; set; } // andar atual (térreo = 0)
        public int AndarUsuário { get; set; } // Andar do usuário!!
        public int PersoasElevador { get; set; } // Persoas no Elevador inicia vazio.
        //------------------------------------------------------------------------------------------------
        //  2)  Construtor Da Clase
        //------------------------------------------------------------------------------------------------
        public Elevador() //CONSTRUTOR DA CLASSE  <--- quando a classe for construida o que será executado.
        {
            Inicializar(); // Método (ações) : Inicializar()
        }
        //------------------------------------------------------------------------------------------------
        //  2) Método (ações) :  Fuctions => Métodos:
        //------------------------------------------------------------------------------------------------
        // Funcao vai executar o Elevador.

        //------------------------------------------------------------------------------------------------
        //  2) Método (ações) : Inicializar()
        //      Deve receber como parâmetros a capacidade do elevador e o total
        //      andares no prédio (os elevadores sempre começam no térreo e vazio);
        //------------------------------------------------------------------------------------------------
        public void Inicializar()
        {
            // O usuário vai informar quantos andares o elevador possui e a capacidade de pessoas.
            Console.WriteLine(" O usuário primeiro vai informar quantos andares o elevador possui e a capacidade de pessoas.\n");
            Console.WriteLine(" \n Entrar capacidade do elevador");
            CapacidadeElevador = int.Parse(Console.ReadLine());
            Console.Clear();
            Console.WriteLine(" \n Entrar Andares Total");
            TotalAndar = int.Parse(Console.ReadLine());
            Console.Clear();
            Console.WriteLine($" \n Entrar capacidade do elevador: {CapacidadeElevador}");
            Console.WriteLine($" \n   Entrar Andares Total: {TotalAndar}");
            // (os elevadores sempre começam no térreo e vazio);
            // andar atual(térreo = 0)
            AndarAtual = 0;
            // Persoas no Elevador inicia vazio = 0
            PersoasElevador = 0;
            //Mostra estado do Elevador
            StateElevator();
        }
        //------------------------------------------------------------------------------------------------
        //  Método (ações) :  0) Entrar:
        //  Deve acrescentar uma pessoa no elevador (só deve acrescentar se ainda houver espaço);
        //------------------------------------------------------------------------------------------------
        public void Entrar()
        {
            if (PersoasElevador < CapacidadeElevador){
                PersoasElevador++;
                StateElevator();
            }
            else{
                Console.Clear();
                Console.WriteLine("Elevador cheio!!\n");
            }
        }
        //------------------------------------------------------------------------------------------------
        // Método (ações) : 1) Sair :
        // Deve remover uma pessoa do elevador (só deve remover se houver alguém dentro dele);
        //------------------------------------------------------------------------------------------------
        public void Sair()
        {
            if (PersoasElevador > 0){
                PersoasElevador--;
                StateElevator();
            }
            else{
                Console.Clear();
                Console.WriteLine(" Elevador Vazio!!\n");
            }
        }
        //------------------------------------------------------------------------------------------------
        // Método (ações) : 2) Subir :
        // Deve subir um andar (não deve subir se já estiver no último andar);
        //------------------------------------------------------------------------------------------------
        public void Subir()
        {
            if (AndarAtual < TotalAndar)
            {
                AndarAtual++;
                StateElevator();
            }
            else
            {
                Console.Clear();
                Console.WriteLine("Elevador Ta no Ultimo Andar!!\n");
            }
        }
        //------------------------------------------------------------------------------------------------
        // Método (ações) :3) Descer :
        // Deve descer um andar (não deve descer se já estiver no térreo);
        //------------------------------------------------------------------------------------------------
        public void Decer()
        {
            if (AndarAtual > 0)
            {
                AndarAtual--;
                StateElevator();
            }
            else
            {
                Console.Clear();
                Console.WriteLine("Elevador Ta no Terreo!!\n");
            }
        }
        //------------------------------------------------------------------------------------------------
        // Método(ações) : Estado Do Elevador
        //------------------------------------------------------------------------------------------------
        public void StateElevator()
        {
            Console.Clear();
            Console.WriteLine($"Capacidade do elevador: {CapacidadeElevador}");
            Console.WriteLine($"     Numero de Andares: {TotalAndar}");
            Console.WriteLine($"         Andares Atual: {AndarAtual}");
            Console.WriteLine($"   Persoas No Elevador: {PersoasElevador}\n");
        }
    }
            </pre>
	<p><span style="font-size: 18px;"><strong>M&eacute;todos:</strong></span></p>
	<ul>
		<li><strong>Inicializar :&nbsp;</strong>deve receber como par&acirc;metros a capacidade do elevador e o total de andares no pr&eacute;dio (os elevadores sempre come&ccedil;am no t&eacute;rreo e vazio);</li>
		<pre class='brush: cs'>
		
        //------------------------------------------------------------------------------------------------
        //  2) Método (ações) : Inicializar()
        //      Deve receber como parâmetros a capacidade do elevador e o total
        //      andares no prédio (os elevadores sempre começam no térreo e vazio);
        //------------------------------------------------------------------------------------------------
		public void Inicializar()
		{
            // O usuário vai informar quantos andares o elevador possui e a capacidade de pessoas.
            Console.WriteLine(" O usuário primeiro vai informar quantos andares o elevador possui e a capacidade de pessoas.\n");
            Console.WriteLine(" \n Entrar capacidade do elevador");
            CapacidadeElevador = int.Parse(Console.ReadLine());
            Console.Clear();

            Console.WriteLine(" \n Entrar Andares Total");
            TotalAndar = int.Parse(Console.ReadLine());
            Console.Clear();
            Console.WriteLine($" \n Entrar capacidade do elevador: {CapacidadeElevador}");
            Console.WriteLine($" \n   Entrar Andares Total: {TotalAndar}");

            // (os elevadores sempre começam no térreo e vazio);

            // andar atual(térreo = 0)
			 AndarAtual = 0;
            // Persoas no Elevador inicia vazio = 0
			 PersoasElevador = 0;

            //Mostra estado do Elevador
			StateElevator();
        }
		</pre>
		<li><strong>Entrar :&nbsp;</strong>deve acrescentar uma pessoa no elevador (s&oacute; deve acrescentar se ainda houver espa&ccedil;o);</li>
		<pre class='brush: cs'>
		
        //------------------------------------------------------------------------------------------------
        //  Método (ações) :  0) Entrar:
        //  Deve acrescentar uma pessoa no elevador (só deve acrescentar se ainda houver espaço);
        //------------------------------------------------------------------------------------------------
        public void Entrar()
        {
            if (PersoasElevador < CapacidadeElevador)
            {
                PersoasElevador++;
                StateElevator();
            }
            else
            {
                Console.Clear();
                Console.WriteLine("Elevador cheio!!\n");
            }
        }
        </pre>
        <li><strong>Sair :&nbsp;</strong>deve remover uma pessoa do elevador (s&oacute; deve remover se houver algu&eacute;m dentro dele);</li>
		<pre class='brush: cs'>
		      //------------------------------------------------------------------------------------------------
        // Método (ações) : 1) Sair :
        // Deve remover uma pessoa do elevador (só deve remover se houver alguém dentro dele);
        //------------------------------------------------------------------------------------------------
        public void Sair()
        {
            if (PersoasElevador > 0)
            {
                PersoasElevador--;
                StateElevator();
            }
            else
            {
                Console.Clear();
                Console.WriteLine(" Elevador Vazio!!\n");
            }
        }
			</pre>
		<li><strong>Subir :&nbsp;</strong>deve subir um andar (n&atilde;o deve subir se j&aacute; estiver no &uacute;ltimo andar);</li>
		<pre class='brush: cs'>
              //------------------------------------------------------------------------------------------------
        // Método (ações) : 2) Subir :
        // Deve subir um andar (não deve subir se já estiver no último andar);
        //------------------------------------------------------------------------------------------------
        public void Subir()
        {
            if (AndarAtual < TotalAndar)
            {
                AndarAtual++;
                StateElevator();
            }
            else
            {
                Console.Clear();
                Console.WriteLine("Elevador Ta no Ultimo Andar!!\n");
            }
        }
			</pre>
		<li><span style="font-size: 16px;"><strong>Descer :</strong>&nbsp;</span>deve descer um andar (n&atilde;o deve descer se j&aacute; estiver no t&eacute;rreo);</li>
		<pre class='brush: cs'>
               //------------------------------------------------------------------------------------------------
        // Método (ações) :3) Descer :
        // Deve descer um andar (não deve descer se já estiver no térreo);
        //------------------------------------------------------------------------------------------------
        public void Decer()
        {
            if (AndarAtual > 0)
            {
                AndarAtual--;
                StateElevator();
            }
            else
            {
                Console.Clear();
                Console.WriteLine("Elevador Ta no Terreo!!\n");
            }
			</pre>
	</ul>
	<p>Autor: Antonio Souto Rodriguez 2021.</p>
</div>
